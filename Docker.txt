Docker version
Docker login, docker info
Directory default docker : /var/lib/docker 

docker ps -> lihat list docker yg lg running 

Install docker extension di visual code 

Create Dockerfile file di folder codingan
Create (optional) .dockerignore file utk pengecualian file yg dieksekusi 

Isi Dockerfile : langkah2 perintah utk eksekusi file
FROM node:12
WORKDIR /app -> lokasi source code
COPY package*.json ./
RUN npm install -> shell form
COPY ..
ENV PORT=8080
EXPOSE 8080 -> port supaya container bisa diakses
CMD ["NPM","start"] -> exec form
atau ENTRYPOINT APP=LOKASI-APP APP RUN 

RUN, COPY, WORKDIR, USER, CMD, EXPOSE, FROM 

docker build -t fireship/demoapp:1.0 .
fireship : username di docker hub
. : path ke file dockerfile 

docker image ls -> cek list image dgn id
docker rmi -> delete image
docker stop namacontainer
docker restart namacontainer 

docker tag image imagewithtag 

docker push image_id
Image yg sudah jadi diupload ke hub.docker.com 

docker run -it -p 5000:8080 image_id 

docker pull image_id 

docker exec namadocker cat /etc/hosts -> eksekusi command di image 

docker run -v /opt/datadir:/var/lib/mysql mysql -> map folder di image dgn folder di luar container 

docker inspect namadocker -> ngecek status container 

docker log namadocker 

Set environtment
color = os.environ.get('APP_COLOR') -> di file codingan
docker run -e APP_COLOR=blue namaimage 

docker run --mount source=shared-stuff,target=/stuff 

Docker Compose
Apabila dlm satu folder lebih dr 1 aplikasi yg dijalankan misal : web dan database 

Docker Vue.js 

FROM node:lts-alpine 

# install simple http server for serving static content
RUN npm install -g http-server 

# make the 'app' folder the current working directory
WORKDIR /app 

# copy both 'package.json' and 'package-lock.json' (if available)
COPY package*.json ./ 

# install project dependencies
RUN npm install 

# copy project files and folders to the current working directory (i.e. 'app' folder)
COPY . . 

# build app for production with minification
RUN npm run build 

EXPOSE 8080
CMD [ "http-server", "dist" ] 

docker build -t vuejs-cookbook/dockerize-vuejs-app . 

docker run -it -p 8080:8080 --rm --name dockerize-vuejs-app-1 vuejs-cookbook/dockerize-vuejs-app 

docker run -it -p 8080:8080 vuejs-cookbook/dockerize-vuejs-app 

docker run -d --name container-name image-name
docker exec -it container-name sh 

docker network create myNetwork
docker network connect myNetwork web1
docker network inspect myNetwork
docker exec -ti web1 ping web2 

Install docker di centos7/rocky
yum install -y yum-utils device-mapper-persistent-data lvm2 

yum-config-manager/dnf config-manager --add-repo=https://download.docker.com/linux/centos/docker-ce.repo 

Atau curl -fsSL https://get.docker.com/ | sh

yum install docker
systemctl start docker 

Laravel+Mysql + nginx 

nano ~/laravel-app/docker-compose.yml 

version: '3'
services:
  
  #PHP Service
  app:
    build:
      context: .
      dockerfile: Dockerfile
    image: digitalocean.com/php
    container_name: app
    restart: unless-stopped
    tty: true
    environment:
      SERVICE_NAME: app
      SERVICE_TAGS: dev
    working_dir: /var/www
    volumes:
      - ./:/var/www
      - ./php/local.ini:/usr/local/etc/php/conf.d/local.ini
    networks:
      - app-network 

  #Nginx Service
  webserver:
    image: nginx:alpine
    container_name: webserver
    restart: unless-stopped
    tty: true
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./:/var/www
      - ./nginx/conf.d/:/etc/nginx/conf.d/
    networks:
      - app-network 

  #MySQL Service
  db:
    image: mysql:5.7.22
    container_name: db
    restart: unless-stopped
    tty: true
    ports:
      - "3306:3306"
    environment:
      MYSQL_DATABASE: laravel
      MYSQL_ROOT_PASSWORD: your_mysql_root_password
      SERVICE_TAGS: dev
      SERVICE_NAME: mysql
    volumes:
      - dbdata:/var/lib/mysql/
      - ./mysql/my.cnf:/etc/mysql/my.cnf
    networks:
      - app-network 

#Docker Networks
networks:
  app-network:
    driver: bridge
#Volumes
volumes:
  dbdata:
    driver: local 

nano ~/laravel-app/Dockerfile 

FROM php:7.2-fpm 

# Copy composer.lock and composer.json
COPY composer.lock composer.json /var/www/ 

# Set working directory
WORKDIR /var/www 

# Install dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    libpng-dev \
    libjpeg62-turbo-dev \
    libfreetype6-dev \
    locales \
    zip \
    jpegoptim optipng pngquant gifsicle \
    vim \
    unzip \
    git \
    curl 

# Clear cache
RUN apt-get clean && rm -rf /var/lib/apt/lists/* 

# Install extensions
RUN docker-php-ext-install pdo_mysql mbstring zip exif pcntl
RUN docker-php-ext-configure gd --with-gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ --with-png-dir=/usr/include/
RUN docker-php-ext-install gd 

# Install composer
RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer 

# Add user for laravel application
RUN groupadd -g 1000 www
RUN useradd -u 1000 -ms /bin/bash -g www www 

# Copy existing application directory contents
COPY . /var/www 

# Copy existing application directory permissions
COPY --chown=www:www . /var/www 

# Change current user to www
USER www 

# Expose port 9000 and start php-fpm server
EXPOSE 9000
CMD ["php-fpm"] 

mkdir ~/laravel-app/php
nano ~/laravel-app/php/local.ini 

mkdir -p ~/laravel-app/nginx/conf.d 

nano ~/laravel-app/nginx/conf.d/app.conf 

server {
    listen 80;
    index index.php index.html;
    error_log  /var/log/nginx/error.log;
    access_log /var/log/nginx/access.log;
    root /var/www/public;
    location ~ \.php$ {
        try_files $uri =404;
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass app:9000;
        fastcgi_index index.php;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $fastcgi_path_info;
    }
    location / {
        try_files $uri $uri/ /index.php?$query_string;
        gzip_static on;
    }
} 

mkdir ~/laravel-app/mysql 

nano ~/laravel-app/mysql/my.cnf
[mysqld]
general_log = 1
general_log_file = /var/lib/mysql/general.log 

cp .env.example .env
nano .env
/var/www/.env 

DB_CONNECTION=mysql DB_HOST=db DB_PORT=3306 DB_DATABASE=laravel DB_USERNAME=laraveluser DB_PASSWORD=your_laravel_db_password 

docker-compose up -d 

docker-compose exec app php artisan key:generate
docker-compose exec app php artisan config:cache
docker-compose exec db bash
mysql -u root -p
show databases;
GRANT ALL ON laravel.* TO 'laraveluser'@'%' IDENTIFIED BY 'your_laravel_db_password'; 

docker-compose exec app php artisan migrate
docker-compose exec app php artisan tinker 

docker-compose -f 
docker-compose.prod.yml up --build 

Set resource memory dan cpu di file konfig .yaml 

Php,Nginx, mysql dan phpmyadmin 

version: '3'
services: 

   web : 
      image : nginx:alpine
      container_name : web
      ports : 
         - "80:80"
      volumes :
         - ./code:/code
         - ./site.conf:/etc/nginx/conf.d/site.conf
      links : 
         - php 

   php :
      image : php:fpm-alpine
      container_name : php
      volumes : 
         - ./code:/code
      links:
         - mysql
  
   mysql:
      image: mysql:8.0.27
      container_name: mysql
      environment:
         MYSQL_ROOT_PASSWORD: 'mediawave2022'
         MYSQL_DATABASE: coba
         MYSQL_USER: coba
         MYSQL_PASSWORD: 'mediawave2022'
      ports:
         - "3306:3306"
      volumes:
         - ./database:/var/lib/mysql 

   phpmyadmin:
      image: phpmyadmin/phpmyadmin
      container_name: pma
      links:
         - mysql
      environment:
         PMA_HOST: mysql
         PMA_PORT: 3306
         PMA_ARBITRARY: 1
      restart: always
      ports:
         - 8085:80 

Isi site.conf :
server { 
index index.php index.html; 
server_name php-docker.local;
error_log /var/log/nginx/error.log; access_log /var/log/nginx/access.log; root /code; 
location ~ \.php$ { try_files $uri =404; fastcgi_split_path_info ^(.+\.php)(/.+)$; fastcgi_pass php:9000; fastcgi_index index.php; include fastcgi_params; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; fastcgi_param PATH_INFO $fastcgi_path_info; } } 

Php, mysql, nginx, with shared volume
version: '3'
services: 

   web : 
      build : 
         context: .
         dockerfile: nginx/Dockerfile
      container_name : web
      ports : 
         - "80:80"
      links : 
         - php
      volumes:
         - shared-volume:/code 

   php :
      build : 
         context: .
         dockerfile: php/Dockerfile
      container_name : php
      links:
         - mysql
      volumes:
         - shared-volume:/code
         - shared-mysql:/dbdata
  
   mysql:
      image: mysql:8.0.27
      container_name: mysql
      environment:
         MYSQL_ROOT_PASSWORD: 'mediawave2022'
         MYSQL_DATABASE: coba
         MYSQL_USER: coba
         MYSQL_PASSWORD: 'mediawave2022'
      ports:
         - "3306:3306"
      volumes:
         - shared-mysql:/var/lib/mysql 

volumes:
   shared-volume:  
   shared-mysql: 

Isi php dockerfile
FROM php:fpm-alpine
RUN docker-php-ext-install pdo_mysql 

Isi nginx dockerfile
FROM nginx:alpine
COPY ./site.conf /etc/nginx/conf.d/site.conf
COPY ./code /code 

docker volume create --name DataVolume1
docker volume ls
docker volume rm -> delete 

docker network create xxx
docker network connect xxx yyy
docker network ls
docker network rm -> delete 

docker rm/start/stop/restart container
docker rmi image 

docker run -ti -d --name xxx -p 80:80 -v shared-volume:/code namaimage 

docker volume inspect shared-volume
docker run -ti --d --name:xxx -p 3306:3306 -v shared-mysql:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=abc namaimage 

Dockerfile Nginx
RUN apt-get -y update && apt-get -y install nginx # Copy the Nginx config COPY default /etc/nginx/sites-available/default # Expose the port for access EXPOSE 80/tcp # Run the Nginx server CMD ["/usr/sbin/nginx", "-g", "daemon off;"]