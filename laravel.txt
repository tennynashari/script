Composer create-project laravel/laravel xxx 
php artisan --version

php artisan serve
Extension vis code : laravel snippers, laravel blade 

Model -> app/
Controller -> app/http
Migration -> database/migration
Route -> routes
view -> resources 

Php artisan make:model -m --seed, make:controller, make:migration, make migrate, php artisan db:seed --class=ProductSeeder 
php artisan make:controller UserController --resource --model=User
Route::resource('users', UserController::class);

return redirect()->route('user.index')->with('success','User created successfully.');

Model diimport di controller, use model, konek ke database yg dicreate lewat make:migration berdasarkan nama, di model primary key dan tabel bisa diset. 

Di controller ada Models.
Eloquent
$model = Model::create(['name' => $request->name])
php artisan make:controller Admin/Dashboard
return redirect()->route('routename')->with('var','isi');
return view(' ', compact('var'))
<a href ={{ route('register') }}>
<a href ={{ url('/register') }}>
Model::insert([
  'name' => tolowercase(str_replace(' ', '-',  $request->name))
])
$model = model::latest()->get()
$model = model::latest()->paginate(5);
$model = model::find($id):
Model::findorfail($id)->update{[
   'name' => $request->name
]}
Model::findorfail($id)->delete()
$model = Model::where('id', $request->id)->value('name');
$model = Model::where('id', $request->id)->increment('count',1);
Model::where('column', 'value ')->withCount('column')->get()/first()
Model::orderBy('column') 

$file = $request->file('namafile')
$namafile = hexdec(uniqid()) . '.' . $file->getClientOriginalExtension();
$request->namafile->move(public_path('upload'), $namafile);
$img_url = 'upload/' . $namafile 

$request->has('name')
$request->filled('name') 

Di routing
Route::get('/link',controller@method)->middleware(['auth', 'role:user'])->name('dashboard') 

route::controller(DashboardController::class)->group(function(){
  Route::get('/xxx', 'index')->name('name');
  Route::get('/yyy', 'index1');
} 

Route::midlleware(['auth', 'role:admin'])->function(){      } 

Route::post 

function add, store, edit, update 

@yield(),@extend(),@section,@endsection,@include, @if, @php, @foreach ($tasks as $task) 

xxx.blade.php
import asset di laravel : <link rel="stylesheet" href="{{ asset('dashboard/assets/vendor.css'}}" />
a href di laravel : <a href="{{ route ('routename', $variabel) }} >
<form action="{{ route('nameroute') }}" method="POST"> @csrf 

@if(session()->has('var'))
    <div class="alert alert-success" >
       {{ session()->get('var') }}


Di migration
$table->string('code', 30)->primary(); 
$table->foreignId('state_id')->constrained()->cascadeOnDelete()
$table->string()>default(0); 

Di model
protected $table = 'DomainRelatedSettings';
protected $primaryKey = 'verification_token';
protected $fillable
public function state(){
   $this->belongsTo/hasMany(state::class);
} -> sesuai foreign key 

Install di Centos
curl -sS https://getcomposer.org/installer | sudo php -- -- install-dir=/usr/bin --filename=compser 

Install di rocky
curl -sS https://getcomposer.org/installer | php
mv composer.phar /usr/local/bin/composer
chmod +x /usr/local/bin/composer
cd var/www/html
composer create ...
chown -R nginx:nginx /var/www/html/laravelsite/storage/
chown -R nginx:nginx /var/www/html/laravelsite/bootstrap/cache
chmod -R 777 /var/www/html/laravelsite/storage/ 

chmod -R 775 /var/www/html/laravelsite/bootstrap/cache
composer
set di root directory nginx/apache
yum install -y unzip
composer create-project laravel/laravel .
chmod -R nginx:root /var/www/laravel
chmod 755 /var/www/laravel/storage 

sestatus
yum -y install policycoreutils-phyton 

Form validation
$validatedData = $request->validate([
'title' => ['required', 'unique:posts', 'max:255'],
'body' => ['required'],
]);
@if ($errors->any())
     <div class="alert alert-danger>
         @foreach ($errors as $error)
              <p>{{ $error }} </p 

@if ($errors->any())
<div class="alert alert-danger">
<ul>
@foreach ($errors->all() as $error)
<li>{{ $error }}</li>
@endforeach
</ul>
</div>
@endif 

Install breeze -> user authentication
composer require laravel/breeze --dev
php artisan breeze:install
npm install
npm run dev
php artisan migrate 

App->http->controller->auth:
RegisterUserController.php 

Install filament
composer require filament/filament:"^2.0"
php artisan migrate
php artisan make:filament-user
php artisan make:filament-resource Country(sesuai Models)
App->filament/resources 

di filament/resources :
ada models -> protected static ?string $model = State::class ;
use Filament\Forms\Components\TextInput 

function form(Form $form): Form { return $form->schema([Card::make()->schema([TextInput::make('name')]) ]) } -> sesuai Models 

function table(Table $table): Table { return $table->column([TextColumn::make('author.name')->sortable()->searchable(), TextColumn::make('created_at')->datetime()])->filters([]) } 

Filament\Forms\Components\TextInput
function form(Form $form): Form { return $form->schema([Card::make()->schema([Select::make('country_id')->relationship('country','name'), TextInput::make('name')->required()]) ]) } -> sesuai Models 

DatePicker::make('birth_date')->required() 

function table(Table $table): Table { return $table->column([TextColumn::make('author.name')->sortable()->searchable(), TextColumn::make('created_at')->datetime()])->filters([])->filters([SelectFilter::make('departement')->relationship('departement','name')])->actions([Tables\Actions\EditAction::make(),])->bulkActions([Tables\Actions\DeleteBulkAction::make(),])} 

function form(Form $form): Form { return $form->schema([Card::make()->schema([Select::make('country_id')->label('Country')->options(Country::all()->pluck('name','id')->toArray())->reactive()->afterStateUpdated(fn (callable $set) => $set('state_id'),null)),
Select::make('state_id')->label('State')->options(function (callable $get){
$country = Country::find($get('country_id'));
return $country->states->pluck('name','id');})->reactive()->afterStateUpdated(fn (callable $set) => $set('city_id', null)); ]) 

Password
{ return $form->schema([Card::make()->schema([TextInput::make('name')->required(), TextInput::make('password')->password()->required(fn (Page $livewire): bool => $livewire instanceof CreateRecord)->minLenght(8)->same('passwordConfirmation')->dehydrated(fn ($state) => filled($state))->dehydrateStateUsing(fn ($state) => Hash::make($state)) ]), TextInput::make('passwordConfirmation')->password()->label('Password Confirmation')->required(fn (Page $livewire) : bool => $livewire instanceof CreateRecord)->minLenght(8)->dehydrated(false) ]) } 




Set fillament sidebar group
Di resource fillament atas -> protected static ?string $navigationGroup = 'nama grup' 

Set Relation antar filament resources
php artisan make:filament-relation-manager namaResources namaRelation namaAtribut
Kemudian isi di function getRelations di class filament resources:
return {
   namaRelationManager::class;
}
Kemudian edit file php terkait di folder RelationManagers, masukkan namaRelation dan namaAtribut



Filament widget
php artisan make:filament-widget NamaStatsOverview --stats-overview , kemudian isi nama filament resource, kemudian isi function getWidget() :
return {
   NamaStatsOverview::class;
}
Kemudian akan membuat file php(ada models di sini) di folder widget di filament resource, edit function getCards() : 
return {
   Card::make('nama widget', 'isi widget'), 
   Card::make('All Employee', 'Employee::all()->count()), 
} 

Export filament config
php artisan vendor:publish --tag=filament-translations, kemudian di folder config akan muncul file filament.php, edit di section 'widget' => 'register'=> [NamaStatsOverview::class] 

php artisan make::resource NamaResource, 
kemudian akan membuat file resources .php di folder app->http->Resources
kemudian edit api.php :
Route::get('employees', function(){
   $employees = Employee::orderBy('first_name')->get()
return NamaResources::collection($employee);
} 

E commerce project 

Install laratrust
composer require santigarcor/laratrust
php artisan vendor:publish --tag="laratrust"
php artisan config:clear
php artisan laratrust:setup
composer dump-autoload
php artisan migrate
php artisan laratrust:seeder 

php artisan vendor:publish --tag="laratrust-seeder"
composer dump-autoload
database->seeders->DatabaseSeeder.php, LaratrustSeeder.php
Di DatabaseSeeder.php :
public function run(){
$this->call(LaratrustSeeeder::class);
}
config di config->laratrust_seeder.php
php artisan migrate
php artisan db:seed



Paypal Integration 

1. Buat Rest Api App di akun paypal bagian My Apps and Credentials, kemudian dapatkan credentialsnya
2. Isi credentials yg sudah didapatkan di file .env (id dan secret)
3. Buat model, controller dan tabel(id, payment id, payer id, payer email, amount, currency, dll) payment
4. composer require league/omnipay omnipay/paypal
5. php artisan make:controller PaymentController
6. Di payment controller :
use Omnipay\Omnipay
public function __construct() {
   $this->gateway = Omnipay::create('PayPal_Rest');
   $this->gateway->setClientId(env('PAYPAL_CLIENT_ID'));
   $this->gateway->setSecret(env('PAYPAL_CLIENT_SECRET'));
$this->gateway->setTestMode(true);
}
public function pay(Request $request){
  try {
     $response = $this->gateway->purchase(array( 
      'amount' => $request->amount,
      'currency' => env('PAYPAL_CURRENCY'),
      'returnUrl' => url('success'),
      'cancelUrl' => url('error')
   ))->send(); 

   if ($response->isRedirect()){$response->redirect();}
   else { return $response->getMessage(); }
  }
} 

public function success(Request $request){
   if ($request->input('paymentId') && $request->input('PayerID')) {
    $transaction = $this->gateway->completePurchase(array(
      'payer_id' => $request->input('PayerID'),
      'transactionReference => $request->input('paymentId') )); 

$response = $transaction-> send(); 

if ($response->isSuccessfull()) {
   $arr = $response->getData(); 

   $payment = new Payment();
   $payment->payment_id = $arr['id'];
   payer_id = $arr['payer']['payer_info]['payer_id'];
   payer_email = $arr['payer']['payer_info]['payer_email'];
   amount = $arr['transaction'][0]['amount']['total];
   currency = env('PAYPAL_CURRENCY');
   payment_status = $arr['state']; 

   $payment->save; 

   return "Payment is succesfull";
}


}


}

LARAVEL CURL POST
// Make Post Fields Array
$data = [
    'name' => 'techsolutionstuff',
    'email' => 'test@gmail.com',
];

$curl = curl_init();

curl_setopt_array($curl, array(
    CURLOPT_URL => "https://example.com",
    CURLOPT_RETURNTRANSFER => true,
    CURLOPT_ENCODING => "",
    CURLOPT_MAXREDIRS => 10,
    CURLOPT_TIMEOUT => 30000,
    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
    CURLOPT_CUSTOMREQUEST => "POST",
    CURLOPT_POSTFIELDS => json_encode($data),
    CURLOPT_HTTPHEADER => array(
    	// Set here requred headers
        "accept: */*",
        "accept-language: en-US,en;q=0.8",
        "content-type: application/json",
    ),
));

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
    echo "cURL Error #:" . $err;
} else {
    print_r(json_decode($response));
}

LARAVEL EMAIL
config file .env :
MAIL_DRIVER=smtp
MAIL_HOST=mail.domainanda.com
MAIL_PORT=465
MAIL_USERNAME=emailanda@domainanda.com
MAIL_PASSWORD=passwordwebmailanda
MAIL_ENCRYPTION=tls
MAIL_FROM_ADDRESS=emailanda@domainanda.com
MAIL_FROM_NAME=”${APP_NAME}”

php artisan make:mail MyTestMail

<?php

namespace App\Mail;

use Illuminate\Bus\Queueable;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Mail\Mailable;
use Illuminate\Mail\Mailables\Content;
use Illuminate\Mail\Mailables\Address;
use Illuminate\Mail\Mailables\Envelope;
use Illuminate\Queue\SerializesModels;

class MyTestMail extends Mailable
{
    use Queueable, SerializesModels;

    public $details;
  
    /**
     * Create a new message instance.
     *
     * @return void
     */
    public function __construct($details)
    {
        $this->details = $details;
    }
  
    /**
     * Build the message.
     *
     * @return $this
     */
    public function envelope()
    {
        //return $this->subject('Mail from websitepercobaan.com')->view('email.testmail');
        return new Envelope(
            from: new Address('no-reply@mediawave.co.id', 'no-reply'),
            subject: 'Test Mail',
        );
    }
    public function content()
    {
        return new Content(
            view: 'email.testmail',
        );
    }
}

testmail.blade.php :
<!DOCTYPE html>
<html>
<head>
    <title>websitepercobaan.com</title>
</head>
<body>
    <h1>{{ $details['title'] }}</h1>
    <p>{{ $details['body'] }}</p>
   
    <p>Thank you</p>
</body>
</html>

php artisan make:controller MailController
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Mail\MyTestMail;
use Illuminate\Support\Facades\Mail;

class MailController extends Controller
{
    
    public function index(){

	$details = [
    'title' => 'Mail from websitepercobaan.com',
    'body' => 'This is for testing email using smtp'
    ];
   
    Mail::to('emailpenerima@gmail.com')->send(new \App\Mail\MyTestMail($details));
   
    dd("Email sudah terkirim.");

	}
}

Route::get('kirim-email','App\Http\Controllers\MailController@index');

Laravel Paypal
composer require paypal/rest-api-sdk-php
buat file config/paypal.php : 
<?php 
return [ 
    'client_id' => 'XXXXXX',
	'secret' => 'XXXXXX',
    'settings' => array(
        'mode' => 'sandbox',
        'http.ConnectionTimeOut' => 1000,
        'log.LogEnabled' => true,
        'log.FileName' => storage_path() . '/logs/paypal.log',
        'log.LogLevel' => 'FINE'
    ),
];

route :
Route::get('paywithpaypal', array('as' => 'paywithpaypal','uses' => 'PaypalController@payWithPaypal',));
Route::post('paypal', array('as' => 'paypal','uses' => 'PaypalController@postPaymentWithpaypal',));
Route::get('paypal', array('as' => 'status','uses' => 'PaypalController@getPaymentStatus',));

PaypalController :
use App\Http\Requests;
use Illuminate\Http\Request;
use Validator;
use URL;
use Session;
use Redirect;
use Input;
use PayPal\Rest\ApiContext;
use PayPal\Auth\OAuthTokenCredential;
use PayPal\Api\Amount;
use PayPal\Api\Details;
use PayPal\Api\Item;
use PayPal\Api\ItemList;
use PayPal\Api\Payer;
use PayPal\Api\Payment;
use PayPal\Api\RedirectUrls;
use PayPal\Api\ExecutePayment;
use PayPal\Api\PaymentExecution;
use PayPal\Api\Transaction;

class PaypalController extends Controller
{
    private $_api_context;
    
    public function __construct()
    {
            
        $paypal_configuration = \Config::get('paypal');
        $this->_api_context = new ApiContext(new OAuthTokenCredential($paypal_configuration['client_id'], $paypal_configuration['secret']));
        $this->_api_context->setConfig($paypal_configuration['settings']);
    }

    public function payWithPaypal()
    {
        return view('paywithpaypal');
    }

    public function postPaymentWithpaypal(Request $request)
    {
        $payer = new Payer();
        $payer->setPaymentMethod('paypal');

    	$item_1 = new Item();

        $item_1->setName('Product 1')
            ->setCurrency('USD')
            ->setQuantity(1)
            ->setPrice($request->get('amount'));

        $item_list = new ItemList();
        $item_list->setItems(array($item_1));

        $amount = new Amount();
        $amount->setCurrency('USD')
            ->setTotal($request->get('amount'));

        $transaction = new Transaction();
        $transaction->setAmount($amount)
            ->setItemList($item_list)
            ->setDescription('Enter Your transaction description');

        $redirect_urls = new RedirectUrls();
        $redirect_urls->setReturnUrl(URL::route('status'))
            ->setCancelUrl(URL::route('status'));

        $payment = new Payment();
        $payment->setIntent('Sale')
            ->setPayer($payer)
            ->setRedirectUrls($redirect_urls)
            ->setTransactions(array($transaction));            
        try {
            $payment->create($this->_api_context);
        } catch (\PayPal\Exception\PPConnectionException $ex) {
            if (\Config::get('app.debug')) {
                \Session::put('error','Connection timeout');
                return Redirect::route('paywithpaypal');                
            } else {
                \Session::put('error','Some error occur, sorry for inconvenient');
                return Redirect::route('paywithpaypal');                
            }
        }

        foreach($payment->getLinks() as $link) {
            if($link->getRel() == 'approval_url') {
                $redirect_url = $link->getHref();
                break;
            }
        }
        
        Session::put('paypal_payment_id', $payment->getId());

        if(isset($redirect_url)) {            
            return Redirect::away($redirect_url);
        }

        \Session::put('error','Unknown error occurred');
    	return Redirect::route('paywithpaypal');
    }

    public function getPaymentStatus(Request $request)
    {        
        $payment_id = Session::get('paypal_payment_id');

        Session::forget('paypal_payment_id');
        if (empty($request->input('PayerID')) || empty($request->input('token'))) {
            \Session::put('error','Payment failed');
            return Redirect::route('paywithpaypal');
        }
        $payment = Payment::get($payment_id, $this->_api_context);        
        $execution = new PaymentExecution();
        $execution->setPayerId($request->input('PayerID'));        
        $result = $payment->execute($execution, $this->_api_context);
        
        if ($result->getState() == 'approved') {         
            \Session::put('success','Payment success !!');
            return Redirect::route('paywithpaypal');
        }

        \Session::put('error','Payment failed !!');
		return Redirect::route('paywithpaypal');
    }
}

Paypal Blade :
<html>
<head>
	<meta charset="utf-8">
	<title>How to integrate paypal payment in Laravel - Techsolutionstuff</title>
	<link href="https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css" rel="stylesheet">
  <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"></script>
</head>
<body>
	<div class="container">
    <div class="row">    	
        <div class="col-md-8 col-md-offset-2">        	
        	<h3 class="text-center" style="margin-top: 90px;">How to integrate paypal payment in Laravel - Techsolutionstuff</h3>
            <div class="panel panel-default" style="margin-top: 60px;">

                @if ($message = Session::get('success'))
                <div class="custom-alerts alert alert-success fade in">
                    <button type="button" class="close" data-dismiss="alert" aria-hidden="true"></button>
                    {!! $message !!}
                </div>
                <?php Session::forget('success');?>
                @endif

                @if ($message = Session::get('error'))
                <div class="custom-alerts alert alert-danger fade in">
                    <button type="button" class="close" data-dismiss="alert" aria-hidden="true"></button>
                    {!! $message !!}
                </div>
                <?php Session::forget('error');?>
                @endif
                <div class="panel-heading"><b>Paywith Paypal</b></div>
                <div class="panel-body">
                    <form class="form-horizontal" method="POST" id="payment-form" role="form" action="{!! URL::route('paypal') !!}" >
                        {{ csrf_field() }}

                        <div class="form-group{{ $errors->has('amount') ? ' has-error' : '' }}">
                            <label for="amount" class="col-md-4 control-label">Enter Amount</label>

                            <div class="col-md-6">
                                <input id="amount" type="text" class="form-control" name="amount" value="{{ old('amount') }}" autofocus>

                                @if ($errors->has('amount'))
                                    <span class="help-block">
                                        <strong>{{ $errors->first('amount') }}</strong>
                                    </span>
                                @endif
                            </div>
                        </div>
                        
                        <div class="form-group">
                            <div class="col-md-6 col-md-offset-4">
                                <button type="submit" class="btn btn-primary">
                                    Paywith Paypal
                                </button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
</body>
</html>


